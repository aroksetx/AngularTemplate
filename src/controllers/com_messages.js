// Generated by CoffeeScript 1.8.0

/**
 @author
 @description
 @name com_messagesController

 @Error codes:
 004 - MISSING_ELEMENT_ERROR: $title : {$value}
 003 - MISSING_PARAMETERS_ERROR : {$parameters}
 015 - VALIDATION_ERROR: This message is broadcast!
 015 - VALIDATION_ERROR: The message cannot be updated!
 012 - MISSING_RELATION_ERROR: This message {$messageId} is not sent to or from this user!
 002 - MYSQL_ERROR
 666 - ACCESS_DENIED!

 @Possible actions:
 addMessage
 updateMessage - dismissed
 changeMessageStatus
 setUserMessageIdsStatus
 setMessagesAsSeen
 setMessagesAsDismissed
 setMessagesAsDeleted
 setMessagesAsTrash
 restoreMessagesFromTrash
 setMessageAsRead
 getInbox
 getOutbox
 getTrash
 getMessageById
 getMessageAllHistory
 getMessageHistoryByMessageHistoryId
 */


/* @ngInject */

(function () {
  module.exports = function ($scope, $restManager, $constantManager) {

    /**
     * @description - Description:  Add new message at the system. Return JSON The new message or an error
     * Check for:
     * if exist user with toUserId
     * if message is blank
     * if subject is blank
     * if message status is MESSAGE_STATUS_ACTIVE/1/ or MESSAGE_STATUS_DISABLED /0/
     * if exist message with ID=inReplyTo
     * @params -
     * */
    $scope.addMessage = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "addMessage",

          //SET DATA PARAMETRS
          data: {
            "message": "39 съобщение ",  //MANDATORY
            "toUserId": "39 ",         // NULL when messageType is broadcast /1/
            "subject": "message 39",  //MANDATORY
            "messagePriority": "1",  // default=1
            "messageStatus": "1",  // 0-disabled; 1- active, default=1
            "inReplyTo": "3"          // default=NULL
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Change messageStatus by messageId and new messageStatus. Add old message to message history.
     * Return JSON The updated message or an error
     * Check for
     * if exist message with messageId
     * if is set messageStatus
     * @params -
     * */
    $scope.changeMessageStatus = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "changeMessageStatus",

          //SET DATA PARAMETRS
          data: {
            "messageId": "20", //MANDATORY
            "messageStatus": "0"  //MANDATORY  /MESSAGE_STATUS_DISABLED=0 - or MESSAGE_STATUS_ACTIVE=1/
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user messages status by messageIds. Only active messages are set.
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * if status is set
     * if sttaus is in (MESSAGE_USER_STATUS_SEEN=1, MESSAGE_USER_STATUS_READED=2,  MESSAGE_USER_STATUS_DISMISSED=3,  MESSAGE_USER_STATUS_TRASH=8, MESSAGE_USER_STATUS_DELETED=9)s
     * @params -
     * */
    $scope.setUserMessageIdsStatus = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setUserMessageIdsStatus",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5],     //MANDATORY
            "status": "1"    //MANDATORY  - status is in (MESSAGE_USER_STATUS_SEEN=1, MESSAGE_USER_STATUS_READED=2,  MESSAGE_USER_STATUS_DISMISSED=3,  MESSAGE_USER_STATUS_TRASH=8, MESSAGE_USER_STATUS_DELETED=9)
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user messages status as seen /status=MESSAGE_USER_STATUS_SEEN=1/ by messageIds. Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * @params -
     * */
    $scope.setMessagesAsSeen = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setMessagesAsSeen",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5]    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user messages status as dismessed /status=MESSAGE_USER_STATUS_DISMISSED=3/ by messageIds. Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * @params -
     * */
    $scope.setMessagesAsDismissed = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setMessagesAsDismissed",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5]    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user messages status as deleted /status=MESSAGE_USER_STATUS_DELETED=9/ by messageIds. Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * @params -
     * */
    $scope.setMessagesAsDeleted = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setMessagesAsDeleted",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5, 8]    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user messages status as trash /status=MESSAGE_USER_STATUS_TRASH=8/ by messageIds. Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * @params -
     * */
    $scope.setMessagesAsTrash = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setMessagesAsTrash",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5, 8]    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user old messages status by messageIds Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * for each message - if exist message with messageId
     * for each message - if message is sent from/to this user
     * @params -
     * */
    $scope.restoreMessagesFromTrash = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "restoreMessagesFromTrash",

          //SET DATA PARAMETRS
          data: {
            "messageIds": [4, 5, 8]    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Set user message status as read /status=MESSAGE_USER_STATUS_READED=2/ by messageId. Only active messages are set.
     * Return JSON JSON Success message or an error
     * Check for:
     * if exist message with messageId
     * if message is sent from/to this user
     * @params -
     * */
    $scope.setMessageAsRead = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "setMessageAsRead",

          //SET DATA PARAMETRS
          data: {
            "messageId": 8   //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get the subjects of all received from user and not deleted messages from user /to user and broadcast/.
     * Parameters are non-mandatory: $search - search string into subject, $order - ASC/DESC,  $offset - begin of searched items,
     * $limit - number of searched items. Searches subject of messages by parameter $search, sort by $order, get items from $offset, get $limit - number of items.
     * Return array  of message subjects
     * @params -
     * */
    $scope.getInbox = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getInbox",

          //SET DATA PARAMETRS
          data: {
            "search": "message",
            "order": "desc", // ASC/DESC / default=ASC
            "offset": "0", //default=0/
            "limit": "12"  // default=100=DEFAULT_LIMIT / , if limit>MAX_LIMIT/1000/, limit=MAX_LIMIT
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get the subjects of all received from user and not deleted messages from user /to user and broadcast/.
     * Parameters are non-mandatory: $search - search string into subject, $order - ASC/DESC,  $offset - begin of searched items,
     * $limit - number of searched items. Searches subject of messages by parameter $search, sort by $order, get
     * items from $offset, get $limit - number of items.
     * Return array  of message subjects
     * @params -
     * */
    $scope.getOutbox = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getOutbox",

          //SET DATA PARAMETRS
          data: {
            "search": "message",
            "order": "desc", // ASC/DESC / default=ASC
            "offset": "0",  //default=0/
            "limit": "12"  // default=100=DEFAULT_LIMIT / , if limit>MAX_LIMIT/1000/, limit=MAX_LIMIT
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get the subjects of all received /to user and broadcast/ and sent from user and not deleted messages
     * deleted from Inbox and Outbox/. Parameters are non-mandatory: $search - search string into subject, $order - ASC/DESC,
     * $offset - begin of searched items, $limit - number of searched items. Searches subject of messages by parameter $search,
     * sort by $order, get items from $offset, get $limit - number of items.
     * Return array  of message subjects
     * @params -
     * */
    $scope.getTrash = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getTrash",

          //SET DATA PARAMETRS
          data: {
            "search": "message",
            "order": "desc",  // ASC/DESC / default=ASC
            "offset": "0",   //default=0/
            "limit": "12"   // default=100=DEFAULT_LIMIT / , if limit>MAX_LIMIT/1000/, limit=MAX_LIMIT
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description -  Get the message data from the database
     * Check for:
     * if exist message with messageId
     * @params -
     * */
    $scope.getMessageById = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getMessageById",

          //SET DATA PARAMETRS
          data: {
            "messageId":"22 "  //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get from history array of message changes
     * Return array of JSON object message OR NULL in case of an error or no result OR error
     * @params -
     * */
    $scope.getMessageAllHistory = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getMessageAllHistory",

          //SET DATA PARAMETRS
          data: {
            "messageId":"33" //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get the message data from the history by $messageHistoryId
     * Return JSON object message data OR NULL in case of an error or no result
     * Check for:
     * if is set messageHistoryId
     * @params -
     * */
    $scope.getMessageHistoryByMessageHistoryId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_messages", action: "getMessageHistoryByMessageHistoryId",

          //SET DATA PARAMETRS
          data: {
            "messageHistoryId":"57" //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

  };

}).call(this);
