// Generated by CoffeeScript 1.8.0

/**
 @author
 @description
 @name com_tracks

 @Possible actions:
 listTracks
 listFilesWithoutTracks
 getTrackById
 getFileById
 getFileByTrackId
 getUserArtists
 getMixVersion
 uploadFiles
 createTrack
 createTracks
 updateTrack
 updateTracks
 updateTrackGenres
 updateTrackArtists
 updateTrackAuthors
 deleteTrack

 @Error codes:
 004 - MISSING_ELEMENT_ERROR: $title : {$value}
 003 - MISSING_PARAMETERS_ERROR : {$parameters}
 017 - CHECK_FILE_ERROR:  {message}
 210 - Parameter {$parameter} is invalid. {$validationMessage}
 015 -VALIDATION_ERROR: This user hasn't rights for this $title : {$value}
 016 - EXISTING_ELEMENT_ERROR: Track with {$title} : {$value} already exist
 001 - GENERAL_ERROR
 002 - MYSQL_ERROR
 666 - ACCESS_DENIED!

 */


/* @ngInject */

(function () {
  module.exports = function ($scope, $constantManager, $restManager) {

    /**
     * @description -  Lists all tracks by keyWords. Gets only tracks with file which belong to user's genericUser. Return JSON Object with array of tracks
     * @params -
     * */
    $scope.listTracks = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "listTracks",

          //SET DATA PARAMETRS
          data: {
            "offset": "0",                   // default=0
            "limit": "2",                   // default=DEFAULT_LIMIT
            "orderType": "DESC",           // ASC / DESC
            "orderColumn": "trackId",     // "trackId", "trackTitle", "fileId", "mixVersion", "ISRC", "cYear", "cHolder", "pYear",
            // "pHolder", "albumOnly", "explicitContent",   "fileName", "storageId" ,"originalFileName",
            //  "dataformat", "channels", "sample_rate", "bitrate", "bits_per_sample", "playtime", "fullFileInfo",
            //  "ownerId", "uploadedByUserId", "dateIn"/
            "condition": "AND",        //  AND / OR
            "keyWords": {
              //      / "trackId", "trackTitle", "fileId", "mixVersion", "ISRC", "cYear", "cHolder", "pYear",
              // "pHolder", "albumOnly", "explicitContent", "fileName", "storageId", "originalFileName",
              // "dataformat", "channels", "sample_rate", "bitrate", "bits_per_sample", "playtime", "fullFileInfo",
              //  "ownerId", "uploadedByUserId", "dateIn" /

              "trackId": "30",
              "trackTitle": "Track 28",
              "fileId": "23",
              "mixVersion": "mix23",
              "ISRC": "BG-A45-15-01019",
              "cYear": "2004",
              "cHolder": "cHolder1",
              "pYear": "2005",
              "pHolder": "pHolder1",
              "albumOnly": "1",
              "explicitContent": "1",
              "fileName": "/home/margarita/public_html/amadeaMusic/files/tracks/17/17_23_1447234360.wav",
              "storageId": "1",
              "originalFileName": "arribba.wav",
              "dataformat": "wav",
              "channels": "1",
              "sample_rate": "11025",
              "bitrate": "88200",
              "bits_per_sample": "8",
              "playtime": "0:04",
              "fullFileInfo": " ",
              "ownerId": "17",
              "uploadedByUserId": "17",
              "dateIn": "2015-11-11 11:33:25"
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        }

        ,

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        }
      )
      ;
    };

    /**
     * @description - Lists files without track.  Gets only tracks with file which belong to user's genericUser.  This method lists without keywords. Return array of JSON file info or error
     * @params -
     * */
    $scope.listFilesWithoutTracks = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "listFilesWithoutTracks",

          //SET DATA PARAMETRS
          data: {
            "offset": "0",                             // default=0
            "limit": "2",                               // default=DEFAULT_LIMIT
            "orderType": "DESC",           //       ASC / DESC
            "orderColumn": "trackId",     //      / "trackId", "trackTitle", "fileId", "mixVersion", "ISRC", "cYear", "cHolder", "pYear",
            // "pHolder", "albumOnly", "explicitContent",   "fileName", "storageId" ,"originalFileName",
            //"dataformat", "channels", "sample_rate", "bitrate", "bits_per_sample", "playtime", "fullFileInfo",
            //"ownerId", "uploadedByUserId", "dateIn"/
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets track info by trackID. Return JSON track info or error
     * Check for: If exists track with trackId, if user has rights - if file is from user's genericUser
     * @params -
     * */
    $scope.getTrackById = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "getTrackById",

          //SET DATA PARAMETRS
          data: {
            "trackId": 10      //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - ets file info by fileId. Return JSON file info or error
     * Check for: If exists file with fileId, if user has rights - if file is from user's genericUser
     * @params -
     * */
    $scope.getFileById = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "getFileById",

          //SET DATA PARAMETRS
          data: {
            "fileId": "28"     //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets file info by trackID. Return JSON file info or error
     * Check for: If exists track with trackId, if user has rights - if file is from user's genericUser
     * @params -
     * */
    $scope.getFileByTrackId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "getFileByTrackId",

          //SET DATA PARAMETRS
          data: {
            "trackId": 18    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets all user artists with profile type PROFILE_TYPE_ARTIST.  If user posts $artistName -
     * return only artists like $artistName, Otherwise - return all user artists. Return array of JSON obj consists artists Id and Name
     * @params -
     * */
    $scope.getUserArtists = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "getUserArtists",

          //SET DATA PARAMETRS
          data: {
            "artistName": "new"
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Creates mixVersion from array of artists. If exist remixer artist mixVersion = "Remixer_Artist Remix", else ="".   Return JSON obj with string mixVersion
     * @params -
     * */
    $scope.getMixVersion = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "getMixVersion",

          //SET DATA PARAMETRS
          data: {
            "artists": [
              {
                "artistId": "10",                // MANDATORY
                "artistRole": "4",              // MANDATORY
                "artistName": "alalall"
              },
              {
                "artistId": "8",               // MANDATORY
                "artistRole": "4"        // MANDATORY
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description -  Expects to get array of files $_FILES. Upload files and add their metadata to DB. Save file to
     * local storage with storageId=1. New file name is  genericUserId_fileId_timestamp.wav into dir: /tracks/genericUserId/.
     * Return array of new file IDs and JSON success message or error
     *
     * @Check_for: file type - "audio/wav", "audio/x-wav", "audio/wave", "audio/x-pn-wav";  file size - 1,5 GB;
     * music files - Channels: 2 Format: WAV
     * bit depth + sample rate /bits_per_sample + sample_rate/
     * WAV, 16 bit, 44.1 kHz
     * WAV, 16 bit, 48 kHz
     * WAV, 24 bit, 44.1 kHz
     * WAV, 24 bit, 48 kHz
     * WAV, 24 bit, 88.2 kHz
     * WAV, 24 bit, 96 kHz
     * WAV, 24 bit, 192 kHz
     *
     * @params -
     * */
    $scope.uploadFiles = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "uploadFiles",

          //SET DATA PARAMETRS
          data: {}
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Create track and  add genres,  add artists,  add authors,  link track to file, generate ISRC if need. Return JSON new track info and success message or error.
     * Check for:
     * genres - must be from level 2 or level 3, at least one genre must be main
     * artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     * authors - if not exist author with authorName - author adds to table authors, check for author role.
     * ISRC - if is valid and is unique
     * if ISRC or assignISRC
     * fileId - if exist, if belongs to genericUserId, if track with fileId exist /fileId must be unique/
     * trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     * year - if in range 1900-2099
     *
     * @params -
     * */
    $scope.createTrack = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "createTrack",

          //SET DATA PARAMETRS
          data: {
            "trackTitle": "Track 28",           // MANDATORY
            "fileId": "45",                              // MANDATORY
            "mixVersion": "mix",
            "ISRC": "BG-A45-15-01011",               // MANDATORY if not  "assignISRC"
            "assignISRC": "1",                               // MANDATORY=  if not  "ISRC"
            "cYear": "2004",                                       //1900 - 2099/
            "cHolder": "cHolder1",
            "pYear": "2005",                                // MANDATORY       /1900 - 2099/
            "pHolder": "pHolder1",                        // MANDATORY
            "albumOnly": "1",                                 //  /0 or 1/
            "explicitContent": "1",                             //  /0 or 1/
            "genres": [                                 // MANDATORY - from 2 and 3 level
              {
                "genreId": 200,
                "main": "1"                                // MANDATORY main=1
              },
              {
                "genreId": 500,
                "main": "1"
              },
              {
                "genreId": 300,
                "main": "1"
              }
            ],
            "artists": [                                      // MANDATORY
              {
                "artistId": "3",
                "artistRole": "1"                 // MANDATORY        artistRole=1
              },
              {
                "artistId": "39",
                "artistRole": "2"
              }
            ],
            "authors": [
              {
                "authorName": "composer1",
                "authorRole": "2"
              },
              {
                "authorName": "producer1",
                "authorRole": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Create tracks and for each track add genres,  add artists,  add authors,  link track to file,
     * generate ISRC if need. Return JSON array of new tracks info and success message OR  JSON track info /with error/ and error
     *
     * Check for:
     * unique ISRC into array
     * unique fileId into array
     * unique trackToken into arary
     * genres - must be from level 2 or level 3, at least one genre must be main
     * artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     * authors - if not exist author with authorName - author adds to table authors, check for author role.
     * ISRC - if is valid and is unique
     * if ISRC or assignISRC
     * fileId - if exist, if belongs to genericUserId, if track with fileId exist /fileId must be unique/
     * trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     * year - if in range 1900-2099
     *
     * @params -
     * */
    $scope.createTracks = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "createTracks",

          //SET DATA PARAMETRS
          data: {
            "tracks": [
              {
                "trackTitle": "Track 27",      // MANDATORY
                "fileId": "22",                         // MANDATORY
                "mixVersion": "mix22",
                "ISRC": " BG-A45-15-01018",             // MANDATORY if not  "assignISRC"
                "assignISRC": " ",                                   // MANDATORY=  if not  "ISRC"
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",                 // MANDATORY
                "pHolder": "pHolder1",           // MANDATORY
                "albumOnly": "1",
                "explicitContent": "1",
                "genres": [                // MANDATORY - from 2 and 3 level
                  {
                    "genreId": 200,
                    "main": "1"          // MANDATORY at least one main=1
                  },
                  {
                    "genreId": 500,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [                // MANDATORY
                  {
                    "artistId": "10",
                    "artistRole": "1"             // MANDATORY        artistRole=1
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              },
              {
                "trackTitle": "Track 28",
                "fileId": "23",
                "mixVersion": "mix23",
                "ISRC": " ",
                "assignISRC": "1",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 500,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description -  Updates track and   update genres,  update artists, update authors, ISRC and fileId cannot be
     * updated. Return JSON track info and success message or error.
     *
     * Check for:
     * genres - must be from level 2 or level 3, at least one genre must be main
     * artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     * authors - if not exist author with authorName - author adds to table authors, check for author role. If array of authors is not - delete authors related to this track
     * fileId - if belongs to genericUserId
     * trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     * year - if in range 1900-2099
     *
     * @params -
     * */
    $scope.updateTrack = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "updateTrack",

          //SET DATA PARAMETRS
          data: {
            "trackId": "20",                 // MANDATORY
            "trackTitle": "Track 101",
            "mixVersion": " mixVersion 20 track",
            "cHolder": " cHolder 20 track",
            "cYear": "2020",                          //1900-2099/
            "pYear": "2020",                        // /1900-2099/
            "pHolder": "pHolder 20 track",
            "albumOnly": "1",                      //0 or 1/
            "explicitContent": "1",                //0 or 1/
            "genres": [                     // MANDATORY
              {
                "genreId": 200,
                "main": "1"
              },
              {
                "genreId": 500,
                "main": "1"
              },
              {
                "genreId": 300,
                "main": "1"
              }
            ],
            "artists": [                      // MANDATORY
              {
                "artistId": "10 ",
                "artistRole": "1"
              },
              {
                "artistId": "8",
                "artistRole": "1"
              }
            ],
            "authors": [
              {
                "authorName": "composer1",
                "authorRole": "2"
              },
              {
                "authorName": "producer1",
                "authorRole": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates tracks and for each track:   update genres,  update artists, update authors,
     * ISRC and fileId cannot be updated. Return JSON array of updated tracks info and success message or JSON track info /with error/ and error.
     *
     * check for unique trackToken into array
     * genres - must be from level 2 or level 3, at least one genre must be main
     * artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     * authors - if not exist author with authorName - author adds to table authors, check for author role. If array of authors is not - delete authors related to this track
     * fileId - if belongs to genericUserId
     * trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     * year - if in range 1900-2099
     *
     * @params -
     * */
    $scope.updateTracks = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "updateTracks",

          //SET DATA PARAMETRS
          data: {
            "tracks": [
              {
                "trackId": "20",     //MANDATORY
                "trackTitle": " ",
                "mixVersion": " ",
                "cHolder": " ",
                "cYear": " ",
                "pYear": " ",
                "pHolder": " ",
                "albumOnly": " 0",
                "explicitContent": " 0",
                "genres": [                  //MANDATORY
                  {
                    "genreId": 201,
                    "main": " "
                  },
                  {
                    "genreId": 501,
                    "main": "1"
                  },
                  {
                    "genreId": 301,
                    "main": " "
                  }
                ],
                "artists": [                    //MANDATORY
                  {
                    "artistId": "39 ",
                    "artistRole": " 1"
                  },
                  {
                    "artistId": "26",
                    "artistRole": " 3"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer3",
                    "authorRole": "3"
                  },
                  {
                    "authorName": "producer4",
                    "authorRole": "4"
                  }
                ]
              },
              {
                "trackId": "21",
                "trackTitle": " ",
                "mixVersion": " ",
                "cHolder": " ",
                "cYear": " ",
                "pYear": " ",
                "pHolder": " ",
                "albumOnly": " ",
                "explicitContent": " ",
                "genres": [
                  {
                    "genreId": 201,
                    "main": " "
                  },
                  {
                    "genreId": 501,
                    "main": " "
                  },
                  {
                    "genreId": 301,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "39 ",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "26",
                    "artistRole": "1"
                  }
                ]
              },
              {
                "trackId": "22",
                "trackTitle": " ",
                "mixVersion": " ",
                "cHolder": " ",
                "cYear": " ",
                "pYear": " ",
                "pHolder": " ",
                "albumOnly": " ",
                "explicitContent": " ",
                "genres": [
                  {
                    "genreId": 201,
                    "main": " 1"
                  },
                  {
                    "genreId": 501,
                    "main": " "
                  },
                  {
                    "genreId": 301,
                    "main": " "
                  }
                ],
                "artists": [
                  {
                    "artistId": "39 ",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "20",
                    "artistRole": "1"
                  }
                ]
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates track genres. Return JSON track info and success message or error.
     *
     * Check for:
     * genres - if is not empty and  must be from level 2 or level 3, at least one genre must be main
     * if track with trackId exists
     * if file related to track exist and  if belongs to genericUserId
     *
     * @params -
     * */
    $scope.updateTrackGenres = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "updateTrackGenres",

          //SET DATA PARAMETRS
          data: {
            "trackId": "20",         // MANDATORY
            "genres": [                 // MANDATORY
              {
                "genreId": 202,
                "main": "1"             // MANDATORY
              },
              {
                "genreId": 502,
                "main": "1"
              },
              {
                "genreId": 302,
                "main": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates track artists. Return JSON track info and success message or error.
     *
     * Check for:
     * artists - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     * if track with trackId exists
     * if file related to track exist and  if belongs to genericUserId
     *
     * @params -
     * */
    $scope.updateTrackArtists = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "updateTrackArtists",

          //SET DATA PARAMETRS
          data: {
            "trackId": "20",           //MANDATORY
            "artists": [                     // MANDATORY
              {
                "artistId": "8 ",
                "artistRole": "1"            // MANDATORY at least one artist's role   artistRole=1 /primaryArtist/
              },
              {
                "artistId": "10",
                "artistRole": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description -  Updates track authors. If authors is empty - deletes all authors related to track. Return JSON
     * track info and success message or error.
     *
     * Check for:
     * authors - if not exist author with authorName - author adds to table authors, check for author role. If array of authors is not - delete authors related to this track
     * if track with trackId exists
     * if file related to track exist and  if belongs to genericUserId
     *
     * @params -
     * */
    $scope.updateTrackAuthors = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "updateTrackAuthors",

          //SET DATA PARAMETRS
          data: {
            "trackId": "20",                   // MANDATORY
            "authors": [
              {
                "authorName": "composer3",
                "authorRole": "3"
              },
              {
                "authorName": "producer4",
                "authorRole": "4"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Delete track by trackId Return JSON success message or an error
     *
     * Check for:
     * if track with trackId exists
     * if file related to track exist and  if belongs to genericUserId
     * if track related to products
     *
     * @params -
     * */
    $scope.deleteTrack = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_tracks", action: "deleteTrack",

          //SET DATA PARAMETRS
          data: {
            "trackId":"31"  //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };


  };
}).call(this);
