// Generated by CoffeeScript 1.8.0

/**
 @author
 @description
 @name com_productsController

 @Possible actions:
 listProducts
 getProductById
 getProductImage
 getProductImageFiles
 getProductDistributionByProductId
 getProductArtistsByProductId
 getProductTracksByProductId
 getProductGenresByProductId
 getUserLabels
 getUserArtists
 createProduct
 updateProduct
 autoSaveProduct
 updateProductTracks
 updateProductArtists
 updateProductGenres
 updateProductDistribution
 connectImageToProduct
 formalControl
 changeProductsStatusToStartCancel
 changeProductsStatusToInProgress
 changeProductsStatusToIncomplete
 changeProductsStatusToPendingApproval

 @Error codes:
 004 - MISSING_ELEMENT_ERROR: $title : {$value}
 003 - MISSING_PARAMETERS_ERROR : {$parameters}
 017 - CHECK_FILE_ERROR:  {message}
 210 - Parameter {$parameter} is invalid. {$validationMessage}
 015 -VALIDATION_ERROR: This user hasn't rights for this $title : {$value}
 015- VALIDATION_ERROR: This admin hasn't rights for  $title : {$value} ";
 016 - EXISTING_ELEMENT_ERROR: Product with {$title} : {$value} already exist
 005 - UNEXPECTED_STATUS_ERROR: Product with status : {$status} cannot be edited by this user
 005- UNEXPECTED_STATUS_ERROR: Product ID: {$productId}  with status : {$oldStatus} cannot be changed to {$newStatus} by this user
 001 - GENERAL_ERROR
 002 - MYSQL_ERROR
 666 - ACCESS_DENIED!
 */


/* @ngInject */

(function () {
  module.exports = function ($scope, $restManager, $constantManager) {


    /**
     * @description - Lists all products by keyWords. Gets only products with owner = user's genericUser. Return JSON Object with array of products
     * @params -
     * */
    $scope.listProducts = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "listProducts",

          //SET DATA PARAMETRS
          data: {
            "condition": "OR",               //        AND /     OR
            "offset": "0",                      // default=0
            "limit": "30",                    // default=DEFAULT_LIMIT
            "orderType": "DESC",
            "orderColumn": "productId",      //   /"productId", "productTitle", "productType", "volumeCount", "productVersion",
            // "variousArtistsCompilation", "labelId", "catalogNumber", "barcode", "priceBand", "releaseDate","cYear", "cHolder",
            // "pYear", "pHolder", "publicDomain", "tribute", "karaoke", "sound", "createdBy", "createdOn", "updatedBy", "updatedOn",
            // "ownerId", "productStatus", "responsibleAdminId", "artistId", "genreId", "trackId", "trackTitle", "ISRC" /

            "keyWords": {                    //    /"productId", "productTitle", "productType", "volumeCount", "productVersion",
              // "variousArtistsCompilation", "labelId", "catalogNumber", "barcode", "priceBand", "releaseDate","cYear", "cHolder", "pYear",
              // "pHolder", "publicDomain", "tribute", "karaoke", "sound", "createdBy", "createdOn", "updatedBy", "updatedOn", "ownerId",
              // "productStatus", "responsibleAdminId", "artistId", "genreId", "trackId", "trackTitle", "ISRC" /

              "productType": "3",
              "productTitle": "Product",
              "artistId": "3"
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets product info by productID. Return JSON product info or error
     *
     * Check for:
     * If exists product with productiId
     * If user has rights
     *
     * @params -
     * */
    $scope.getProductById = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductById",

          //SET DATA PARAMETRS
          data: {
            "productId": "56"  //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get image by product Id.  Return JSON product info or error
     * Check for:
     * If exists product with productiId
     * If user has rights
     *
     * @params -
     * */
    $scope.getProductImage = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductImage",

          //SET DATA PARAMETRS
          data: {
            "productId": "56"    //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Getall image files by product Id.  Return array of images files
     *
     * Check for:
     * If exists product with productiId
     * If user has rights
     *
     * @params -
     * */
    $scope.getProductImageFiles = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductImageFiles",

          //SET DATA PARAMETRS
          data: {
            "productId": "56"        //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Get product distribution by productID.  Return JSON product distribution or error
     * Check for:
     * If exists product with productiId
     * If user has rights
     * @params -
     * */
    $scope.getProductDistributionByProductId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductDistributionByProductId",

          //SET DATA PARAMETRS
          data: {
            "productId": "56"         //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets product artists by productID.  Return JSON  array of product artists or error
     *
     * Check for:
     * If exists product with productiId
     * If user has rights
     *
     * @params -
     * */
    $scope.getProductArtistsByProductId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductArtistsByProductId",

          //SET DATA PARAMETRS
          data: {
            "productId": "56"       //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets product tracks by productID.  Return JSON  array of product tracks or error
     * Check for:
     * If exists product with productiId
     * If user has rights
     * @params -
     * */
    $scope.getProductTracksByProductId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductTracksByProductId",

          //SET DATA PARAMETRS
          data: {
            "productId": "72"           //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets product genres by productID.  Return JSON  array of genres or error
     * Check for:
     * If exists product with productiId
     * If user has rights
     *
     * @params -
     * */
    $scope.getProductGenresByProductId = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getProductGenresByProductId",

          //SET DATA PARAMETRS
          data: {
            "productId": "72"           //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets all user artists with profile type PROFILE_TYPE_LABEL.  If user posts $artistName - return
     * only artists like $artistName,  Otherwise - return all user labels Return array of JSON obj consists artists Id and Name
     * @params -
     * */
    $scope.getUserLabels = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getUserLabels",

          //SET DATA PARAMETRS
          data: {
            "artistName": "Label"
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Gets all user artists with profile type PROFILE_TYPE_ARTIST If user posts $artistName - return
     * only artists like $artistName,  Otherwise - return all user artists.  Return array of JSON obj consists artists Id and Name
     * @params -
     * */
    $scope.getUserArtists = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "getUserArtists",

          //SET DATA PARAMETRS
          data: {
            "artistName": "3 "
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Create product only from ptoductTitle.  Add  all data as default, add distribution data as default,
     * generates token. If exist product with this token - return error
     * @params -
     * */
    $scope.createProduct = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "createProduct",

          //SET DATA PARAMETRS
          data: {
            "productTitle": "Product 76"            //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Update product. Update genres + artists+tracks+image+distribution. Barcode cannot be updated /if
     * exist in productId/. Generates productToken and check if exist  other  product with this token. Expects to get array
     * $_FILES with image /non-mandatory/
     *
     * Return JSON product info or error
     *
     * Check for:

     If exists product with productiId
     If user has rights
     check if exist  other  product with this productToken
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters: "productTitle", "productType",   "variousArtistsCompilation",  "catalogNumber",
     "priceBand", "releaseDate", "cYear", "cHolder", "pYear", "pHolder".  If userProfile is PROFILE_TYPE_DISTRIBUTOR or userProfile is PROFILE_TYPE_LABEL - labelId is mandatory. If ! barcode and ! assignBarcode --->error. Mandatory are arrays: genres, artists, tracks, /image or $_FILES/.  if user is generic user -distribution is mandatory.
     validate data:
     product data
     if invalid productType ---> return error
     if productType==PRODUCT_TYPE_BOXEDSET and volumeCount <= 3 ---> return error
     if Invalid priceBand ---> return error
     if variousArtistsCompilation----> artistId=VARIOUS_ARTISTS_ID,  artistRole=ARTIST_ROLE_PRIMARY and add info message
     if Invalid year /"pYear", "cYear"/---> return error
     Invalid release date /date<=now/---> return error
     if set labelId - check if label eist and user has rights of this label, else---> return error
     if exist  other  product with this productToken ---> return error
     if exist barcode and user want to change barcode ---> return error
     if user want to change barcode and barcode exists in other product - ---> return error
     genres data
     check if genres from level 2, if it is not ---> return error
     check for main genres , if it is not ---> return error
     artists data
     check if artist exist, if it is not ----> return error
     check if user has rights for this artist, if it is not - ---> return error
     check for Invalid artist role, if it is - - ---> return error
     check for primary artist, if it is not ----> return error
     generates productToken and check if it exist in other product, if it is ---> return error
     track data
     prepare track orders, check volumes and set 2 arrays of tracks - for create tracks and for existing tracks
     existing tracks  - for each track:
     check volumeNum and if volumeNum> volumeCount ----> return error
     if not trackId - check if it is already created by autoSave and set trackId to trackif trackId
     check if user has rights for this track and if it is not ---> return error
     non- existing tracks  - for each track: validate all needed data for create track:  all non-validated data return error
     Check for:

     unique ISRC into array
     unique fileId into array
     unique trackToken into arary
     genres - must be from level 2 or level 3, at least one genre must be main
     artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     authors - if not exist author with authorName - author adds to table authors, check for author role.
     ISRC - if is valid and is unique
     if ISRC or assignISRC
     fileId - if exist, if belongs to genericUserId, if track with fileId exist /fileId must be unique/
     trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     year - if in range 1900-2099
     distribution data

     if user is child - he hasn't rights for update distribution details
     if  isAllTerritory!=0 or 1 ----> return error,  if is not set ---->1
     if isAllServices!=0 or 1 ----> return error,  if is not set ---->1
     if isAllLicensingTracks !=0 or 1 or 2 ----> return error,  if is not set ---->1
     if isAllTerritory==0 /selected countries/ and ! countries ----> return error
     if isAllTerritory==1 /selected wordwide/ and  countries ----> return error
     if isAllServices==0 /selected services/   and ! services ----> return error
     if isAllServices==1 /selected all services/ and  services ----> return error
     if isAllLicensingTracks==0 /selected tracks/   and ! tracks ----> return error
     if isAllLicensingTracks==1 /selected all tracks/   and tracks ----> return error
     isAllLicensingTracks==2 /selected no tracks/   and tracks  ----> return error
     image   /image or $_FILES are mandatory
     mime types = "image/png", "image/jpeg"
     image  = square
     image file size<=30 MB
     Image is  not in CMYK
     Image is 1000x1000 px
     * @params -
     * */
    $scope.updateProduct = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "updateProduct",

          /**
           *  all data for tracks is mandatory
           *  all data for artists is mandatory
           *  all data for genres is mandatory
           *  all data for distribution is mandatory /if user is generic/
           *  all data for image/$_FILES  is mandatory
           *  all data for product is mandatory
           * **/

          //SET DATA PARAMETRS
          data: {
            "viewForm": "1",                 // 0 for frontend
            "productId": "53",
            "productTitle": "Product 53",
            "productType": "1",
            "productVersion": "",
            "variousArtistsCompilation": "0",
            "labelId": "6",
            "catalogNumber": "sfsfsdfsdf",
            "assignBarcode": "0",
            "barcode": "760036",
            "priceBand": "3",
            "releaseDate": "2015-12-25",
            "cYear": "2004",
            "cHolder": "cHolder",
            "pYear": "2014",
            "pHolder": "pHolder",
            "publicDomain": "0",
            "tribute": "0",
            "karaoke": "0",
            "sound": "0",
            "genres": [
              {
                "genreId": 200,
                "main": "1"
              },
              {
                "genreId": 300,
                "main": "1"
              }
            ],
            "artists": [
              {
                "artistId": "10",
                "artistRole": "1"
              },
              {
                "artistId": "8",
                "artistRole": "1"
              }
            ],
            "image": {
              "imageNamePiece": "1448460307"
            },
            "tracks": [
              {
                "trackId": "25",
                "order": "3",
                "volumeNum": "0"
              },
              {
                "trackId": "26",
                "order": "2",
                "volumeNum": "0"
              },
              {
                "trackId": "27",
                "order": "1",
                "volumeNum": "0"
              }
            ],
            "distribution": {
              "isAllTerritory": "0",
              "isAllServices": "0",
              "youTubeContentId": null,
              "isSoundExchange": "0",
              "isAllLicensingTracks": "2",
              "countries": [10, 15, 20],
              "stores": [6, 7, 8, 8, 4],
              "storeGroups": [2, 13, 12, 14]
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Auto save product. Auto save genres. Auto save artists  Auto save tracks. Barcode cannot be updated
     * /if exist in productId/. Generates productToken and check if exist  other  product with this token. Expects to get array  $_FILES with image /non-mandatory/
     *
     * Return JSON product info or error
     * Check for:
     * If exists product with productiId
     * If user has rights
     * check if exist  other  product with this productToken
     * if productStatus== PRODUCT_STATUS_IN_PROGRESS
     * validate data:
     *
     * product data
     if invalid productType ---->  productType=NULL;
     if productType==PRODUCT_TYPE_BOXEDSET and volumeCount <= 3 --->  volumeCount=NULL
     if Invalid priceBand -----> priceBand=NULL
     if variousArtistsCompilation----> artistId=VARIOUS_ARTISTS_ID,  artistRole=ARTIST_ROLE_PRIMARY
     if Invalid year /"pYear", "cYear"/ ----->  pYear, cYear=NULL
     Invalid release date /date<=now/ -->  releaseDate=NULL
     if set labelId - check if label eist and user has rights of this label, else ---->labelId=NULL
     if exist  other  product with this productToken - return error
     if exist barcode and user want to change barcode - ---> barcode=NULL
     if user want to change barcode and barcode exists in other product - -------> barcode=NULL
     genres data
     check if genres from level 2, if it is not ------> genres=NULL
     check for main genres , if it is not - only message for user
     artists data
     check if artist exist, if it is not - continue with next artist
     check if user has rights for this artist, if it is not - continue with next artist
     check for Invalid artist role, if it is - - continue with next artist
     check for promary artist, if it is not - only message for user
     generates productToken and check if it exist in other product, if it is - return error
     track data
     prepare track orders, check volumes and set 2 arrays of tracks - for create tracks and for existing tracks
     existing tracks  - for each track:
     check volumeNum and if volumeNum> volumeCount - - only message for user
     if not trackId - check if it is already created by autoSave and set trackId to trackif trackId
     check if user has rights for this track and if it is not - return eror
     non- existing tracks  - for each track: validate al needed data for create track:
     Check for:

     unique ISRC into array
     unique fileId into array
     unique trackToken into arary
     genres - must be from level 2 or level 3, at least one genre must be main
     artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     authors - if not exist author with authorName - author adds to table authors, check for author role.
     ISRC - if is valid and is unique
     if ISRC or assignISRC
     fileId - if exist, if belongs to genericUserId, if track with fileId exist /fileId must be unique/
     trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     year - if in range 1900-2099
     distribution data

     if user is child - hi hasn't rights for update distribution details
     if  isAllTerritory!=0 or 1 ---->  isAllTerritory=NULL, if is not set ---->1
     if isAllServices!=0 or 1 --->  isAllServices=NULL, if is not set ---->1
     if isAllLicensingTracks !=0 or 1 or 2  --->isAllLicensingTracks=NULL, if is not set ---->1
     if isAllTerritory==0 /selected countries/ and ! countries - - only message for user
     if isAllTerritory==1 /selected wordwide/ and  countries - - only message for user
     if isAllServices==0 /selected services/   and ! services - - only message for user
     if isAllServices==1 /selected all services/ and  services - - only message for user
     if isAllLicensingTracks==0 /selected tracks/   and ! tracks - - only message for user
     if isAllLicensingTracks==1 /selected all tracks/   and tracks - - only message for user
     isAllLicensingTracks==2 /selected no tracks/   and tracks - - only message for user
     image
     mime types = "image/png", "image/jpeg"
     image  = square
     image file size<=30 MB
     Image is  not in CMYK
     Image is 1000x1000 px
     *
     * @params -
     * */
    $scope.autoSaveProduct = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "autoSaveProduct",

          /**
           * if exist tracks - all data for tracks is mandatory
           * if exist artists - all data for artists is mandatory
           * if exist genres - all data for genres is mandatory
           * if exist distribution - all data for distribution is mandatory
           * if exist image - all data for image is mandatory
           * all data for product is mandatory
           * **/

          //SET DATA PARAMETRS
          data: {
            //  ALL  FOR PRODUCT IS MANDATORY

            "productId": "76",              //MANDATORY
            "viewForm": "1",                           //  = 0 for frontend
            "productTitle": "Product 66 ",
            "productType": "3 ",
            "productVersion": " ",
            "variousArtistsCompilation": " 0",
            "labelId": "67",
            "catalogNumber": "121020vbvb102012 ",
            "barcode": " ",
            "assignBarcode": " ",
            "priceBand": "  3",
            "releaseDate": "2015-12-31 ",
            "cYear": " 2004",
            "cHolder": "cHolder1",
            "pYear": "2005 ",
            "pHolder": "pHolder1",
            "publicDomain": " ",
            "tribute": " ",
            "karaoke": " ",
            "sound": " ",

            "genres": [
              {
                "genreId": 200,
                "main": "1"
              },
              {
                "genreId": 400,
                "main": "1"
              },
              {
                "genreId": 300,
                "main": "1"
              }
            ],
            "artists": [
              {
                "artistId": "10",
                "artistRole": "3"
              },
              {
                "artistId": "8",
                "artistRole": "1"
              }
            ],
            "tracks": [
              {
                "trackId": "51",
                "order": "5",
                "trackTitle": "product 60 005"
              },
              {
                "trackId": "52",
                "order": "1",
                "trackTitle": "product 60 20"
              },
              {
                "trackId": "53",
                "order": "2"
              },
              {
                "trackId": "54",
                "order": "7"
              },
              {
                "order": "1402",
                "trackTitle": "Track 83",
                "fileId": "83",
                "mixVersion": "mix22",
                "ISRC": " BG-A45-15-01056",
                "assignISRC": " ",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "trackToken": "",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 400,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              },
              {
                "order": "142",
                "trackTitle": "Track 84",
                "fileId": "84",
                "mixVersion": "mix23",
                "ISRC": " ",
                "assignISRC": "1",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "trackToken": "",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              }
            ],
            "distribution": {
              "isAllTerritory": "1",
              "selectServices": "1",
              "youTubeContentId": null,
              "isSoundExchange": "0",
              "isAllLicensingTracks": "0",
              "countries": [10, 15, 20],
              "stores": [6, 7, 8, 8, 4],
              "storeGroups": [2, 13, 12, 14]
            },
            "image": {
              "imageTitle": "title",
              "imageDescription": "description"
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates product tracks. Expect to get from user array of existing tracks /trackId, trackTitle/
     * and new tracks /with all data needed to create/. Check if product and tracks exists and user has right to this product.
     * Check if user has rights to existing tracks.  Check for all data for new tracks. Sort tracks by volumeNum and order and prepare
     * track order for each volume.
     *
     * Return JSON product info or error
     *
     * Check for:

     If exists product with productiId
     If user has rights
     check if exist  other  product with this productToken
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters: array "tracks".
     validate data:


     prepare track orders, check volumes and set 2 arrays of tracks - for create tracks and for existing tracks
     existing tracks  - for each track:
     check volumeNum and if volumeNum> volumeCount ----> return error
     if not trackId - check if it is already created by autoSave and set trackId to track  if trackId
     check if user has rights for this track and if it is not ---> return error
     non- existing tracks  - for each track: validate all needed data for create track:  every non-validated data return error
     Check for:

     unique ISRC into array
     unique fileId into array
     unique trackToken into arary
     genres - must be from level 2 or level 3, at least one genre must be main
     artists - - for each artist check - if artist exist, if user has rights to this artist, check for artist's role, at least one artist must be primary
     authors - if not exist author with authorName - author adds to table authors, check for author role.
     ISRC - if is valid and is unique
     if ISRC or assignISRC
     fileId - if exist, if belongs to genericUserId, if track with fileId exist /fileId must be unique/
     trackToken - must be unique /trackToken=trackTitle+artistIds+mixVersion/
     year - if in range 1900-2099
     *
     * @params -
     * */
    $scope.updateProductTracks = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "updateProductTracks",

          //SET DATA PARAMETRS
          data: {
            "productId": "76",             //MANDATORY
            "tracks": [                       //MANDATORY
              {
                "trackId": "96",                       //MANDATORY for existing tracks
                "order": "2",
                "volumeNum": "2",             //MANDATORY when the product has several volumes
                "trackTitle": "Track 110"
              },
              {
                "trackId": "97",
                "order": "1",
                "volumeNum": "2",
                "trackTitle": "Track 111"
              },
              {
                "trackId": "98",
                "order": "1",
                "volumeNum": "1",
                "trackTitle": "Track 112"
              },
              {                                                                //MANDATORY for new tracks all needed data for create a track
                "volumeNum": "1",
                "order": "1",
                "trackTitle": "Track 130",
                "fileId": "130",
                "mixVersion": "mix130",
                "ISRC": "  ",
                "assignISRC": "1 ",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 400,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              },
              {
                "volumeNum": "1",
                "order": "1",
                "trackTitle": "Track 131",
                "fileId": "131",
                "mixVersion": "mix131",
                "ISRC": " ",
                "assignISRC": "1",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              },
              {
                "volumeNum": "2",
                "order": "120",
                "trackTitle": "Track 132",
                "fileId": "132",
                "mixVersion": "mix132",
                "ISRC": " ",
                "assignISRC": "1",
                "cYear": "2004",
                "cHolder": "cHolder1",
                "pYear": "2005",
                "pHolder": "pHolder1",
                "albumOnly": "1",
                "explicitContent": "1",
                "genres": [
                  {
                    "genreId": 200,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  },
                  {
                    "genreId": 300,
                    "main": "1"
                  }
                ],
                "artists": [
                  {
                    "artistId": "10",
                    "artistRole": "1"
                  },
                  {
                    "artistId": "8",
                    "artistRole": "1"
                  }
                ],
                "authors": [
                  {
                    "authorName": "composer1",
                    "authorRole": "2"
                  },
                  {
                    "authorName": "producer1",
                    "authorRole": "1"
                  }
                ]
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates product artists. Check if product and artists exist and user has right to this product.
     * Check if user has rights to artists. When product is variousArtistsCompilation - makes array of artists as array
     * of 1 element={artistId=VARIOUS_ARTISTS_ID,  artistRole=ARTIST_ROLE_PRIMARY}
     *
     * Return JSON product info  or error.
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters:    array :   artists
     validate data:
     artists data
     check if artist exist, if it is not ----> return error
     check if user has rights for this artist, if it is not - ---> return error
     check for Invalid artist role, if it is - - ---> return error
     check for primary artist into array, if it is not ----> return error
     generates productToken and check if it exist in other product, if it is ---> return error
     * @params -
     * */
    $scope.updateProductArtists = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "updateProductArtists",

          //SET DATA PARAMETRS
          data: {
            "productId": "76",  //MANDATORY

            "artists": [
              {
                "artistId": "10",          //MANDATORY
                "artistRole": "3"         //MANDATORY
              },
              {
                "artistId": "26",
                "artistRole": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates product genres
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters:  array: genres
     validate data:
     genres data
     check if genres are from level 2, if it is not ---> return error
     check for main genres , if it is not ---> return error

     * @params -
     * */
    $scope.updateProductGenres = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "updateProductGenres",

          //SET DATA PARAMETRS
          data: {
            "productId": "76",  //MANDATORY

            "genres": [
              {
                "genreId": 200,           //MANDATORY
                "main": "1"                //MANDATORY
              },
              {
                "genreId": 200,
                "main": "1"
              },
              {
                "genreId": 400,
                "main": "1"
              }
            ]
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Updates product distribution
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters:    -distribution
     validate data:
     distribution data

     if user is child - he hasn't rights for update distribution details
     if  isAllTerritory!=0 or 1 ----> return error,  if is not set ---->1
     if isAllServices!=0 or 1 ----> return error,  if is not set ---->1
     if isAllLicensingTracks !=0 or 1 or 2 ----> return error,  if is not set ---->1
     if isAllTerritory==0 /selected countries/ and ! countries ----> return error
     if isAllTerritory==1 /selected wordwide/ and  countries ----> return error
     if isAllServices==0 /selected services/   and ! services ----> return error
     if isAllServices==1 /selected all services/ and  services ----> return error
     if isAllLicensingTracks==0 /selected tracks/   and ! tracks ----> return error
     if isAllLicensingTracks==1 /selected all tracks/   and tracks ----> return error
     isAllLicensingTracks==2 /selected no tracks/   and tracks  ----> return error
     *
     * @params -
     * */
    $scope.updateProductDistribution = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "updateProductDistribution",

          //SET DATA PARAMETRS
          data: {
            "productId": "76",   //MANDATORY

            "distribution": {
              "isAllTerritory": "0",
              "isAllServices": "0",
              "youTubeContentId": "12",
              "isSoundExchange": "0 ",
              "isAllLicensingTracks": " 0",
              "countries": [10, 15, 20],
              "stores": [6, 7, 8, 8, 4],
              "storeGroups": [2, 13, 12, 14],
              "tracks": [96, 97, 98]
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - This method is for add and update product image. Get image and connect it to product. Expects to get array  $_FILES with image

     Check for:

     If exists product with productiId
     If user has rights
     if productStatus== PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     child user can update product in status PRODUCT_STATUS_IN_PROGRESS, generic  - PRODUCT_STATUS_IN_PROGRESS OR  PRODUCT_STATUS_INCOMPLETE
     validate  for missing paarmeters:  $_FILES/.
     validate data:
     image   / $_FILES are mandatory
     mime types = "image/png", "image/jpeg"
     image  = square
     image file size<=30 MB
     Image is  not in CMYK
     Image is 1000x1000 px

     * @params -
     * */
    $scope.connectImageToProduct = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "connectImageToProduct",

          //SET DATA PARAMETRS
          data: {
            "productId": "76", //MANDATORY

            "image": {
              "imageTitle": "title 76",
              "imageDescription": "description 76"
            }
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Check and determines the product as: - Various Artists Compilation/Album/EP/Single.
     * Check for missing parameters and validate all  product data of existing product.
     *
     * eturn info messages and JSON obj with:
     - variousArtist trackId
     - longSong trackId
     - allPlayTime - all product play time
     - countTracks - number of tracks

     If exist error /when validate all product data/ or missing parameters - return all errors and missing parameters

     Check for:

     If exists product with productiId
     If user has rights
     for missing parameters
     validate all product data :
     all data for tracks is mandatory
     all data for artists is mandatory
     all data for genres is mandatory
     all data for distribution is mandatory /if user is generic/
     all data for image/$_FILES  is mandatory
     all data for product is mandatory
     *
     * @params -
     * */
    $scope.formalControl = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "formalControl",

          //SET DATA PARAMETRS
          data: {
            "productId":"73"  //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Change productStatus to PRODUCT_STATUS_START_CANCEL.
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if old status is PRODUCT_STATUS_APPROVED     /old status =1,2,3,4/
     *
     * @params -
     * */
    $scope.changeProductsStatusToStartCancel = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "changeProductsStatusToStartCancel",

          //SET DATA PARAMETRS
          data: {
            "productIds":["66",64,65]   //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Change productStatus to PRODUCT_STATUS_IN_PROGRESS
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if old status is
     if child user ---- PRODUCT_STATUS_RETURNED_FOR_CLARIFICATIONS
     if generic user - ----PRODUCT_STATUS_INCOMPLETE or
     PRODUCT_STATUS_RETURNED_FOR_CLARIFICATIO
     *
     *
     * @params -
     * */
    $scope.changeProductsStatusToInProgress = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "changeProductsStatusToInProgress",

          //SET DATA PARAMETRS
          data: {
            "productIds":["66",64,65]   //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description -  Change productStatus to PRODUCT_STATUS_INCOMPLETE.  If status is changed from child user - send message to generic user
     *
     * Return  JSON success message or an error

     Check for:

     If exists product with productiId
     If user has rights
     if old status is
     if child user ----PRODUCT_STATUS_IN_PROGRESS or  PRODUCT_STATUS_RETURNED_FOR_CLARIFICATIONS
     if generic user - ----PRODUCT_STATUS_IN_PROGRESS  or
     PRODUCT_STATUS_RETURNED_FOR_CLARIFICATIONS
     *
     * @params -
     * */
    $scope.changeProductsStatusToIncomplete = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "changeProductsStatusToIncomplete",

          //SET DATA PARAMETRS
          data: {
            "productIds":["66",64,65]   //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

    /**
     * @description - Change productStatus to PRODUCT_STATUS_PENDING_APPROVAL. Validate via formal control product
     * /Check for missing parameters, validation errors and determines product type/. Send messages to admins
     *
     * Check for:

     If exists product with productiId
     If user has rights
     if old status is
     if child user ----cannot change to this status
     if generic user - ----PRODUCT_STATUS_IN_PROGRESS  or  PRODUCT_STATUS_INCOMPLETE  or
     PRODUCT_STATUS_RETURNED_FOR_CLARIFICATIONS
     *
     * @params -
     * */
    $scope.changeProductsStatusToPendingApproval = function () {

      //GENERATE REQUEST USING $RESTMANAGER SERVICE
      $restManager.generateRequest($constantManager.apiUrl).post({

          //SET COMPONENT AND ACTION
          component: "com_products", action: "changeProductsStatusToPendingApproval",

          //SET DATA PARAMETRS
          data: {
            "productIds":["66",64,65]   //MANDATORY
          }
        },

        //GET SUCCESS RESPONCE DATA
        function success(response) {
          console.info(response)
        },

        //GET UNSACCESS RESPONCE DATA
        function (error) {
          console.warn(error);
        });
    };

  };

}).call(this);
